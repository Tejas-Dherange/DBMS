Implement Map reduce operation with following example using MongoDB
Students(stud_id, stud_name,stud_addr,stud_marks) 

### **Step 1: Sample Data**
Assuming we have a **Students** collection with documents structured like this:

```json
{
    "stud_id": 1,
    "stud_name": "Alice",
    "stud_addr": "New York",
    "stud_marks": 85
},
{
    "stud_id": 2,
    "stud_name": "Bob",
    "stud_addr": "California",
    "stud_marks": 90
},
{
    "stud_id": 3,
    "stud_name": "Charlie",
    "stud_addr": "New York",
    "stud_marks": 78
}
```

---

### **Step 2: Map Function**
The **map function** emits key-value pairs where the key is the student's address and the value is the marks.

```javascript
var mapFunction = function() {
    emit(this.stud_addr, this.stud_marks);
};
```

---

### **Step 3: Reduce Function**
The **reduce function** calculates the average marks per student address.

```javascript
var reduceFunction = function(key, values) {
    var sum = values.reduce((acc, val) => acc + val, 0);
    return sum / values.length;
};
```

---

### **Step 4: Executing MapReduce in MongoDB**
Use the **mapReduce()** method:

```javascript
db.Students.mapReduce(
    mapFunction,
    reduceFunction,
    { out: "average_marks_per_address" }
);
```

---

### **Step 5: Retrieving Results**
To see the results stored in the new collection:

```javascript
db.average_marks_per_address.find().pretty();
```

---

### **Expected Output**
After running MapReduce, the output might look like:

```json
{
    "_id": "New York",
    "value": 81.5
},
{
    "_id": "California",
    "value": 90
}
```

Q23 Implement all Aggregation operations and types of indexing with following collection using MongoDB. 
Employee(emp_id, emp_name,emp_dept,salary)


## **1. Aggregation Operations**

### **a) $match â†’ Filter employees from a specific department**
```javascript
db.Employee.aggregate([
    { $match: { emp_dept: "HR" } }
]);
```

### **b) $group â†’ Group employees by department and calculate average salary**
```javascript
db.Employee.aggregate([
    { $group: { _id: "$emp_dept", avg_salary: { $avg: "$salary" } } }
]);
```

### **c) $sort â†’ Sort employees by salary in descending order**
```javascript
db.Employee.aggregate([
    { $sort: { salary: -1 } }
]);
```

### **d) $project â†’ Display only employee name and salary**
```javascript
db.Employee.aggregate([
    { $project: { emp_name: 1, salary: 1, _id: 0 } }
]);
```

### **e) $lookup â†’ Perform a join with another collection (e.g., Department)**
```javascript
db.Employee.aggregate([
    {
        $lookup: {
            from: "Department",
            localField: "emp_dept",
            foreignField: "dept_name",
            as: "dept_details"
        }
    }
]);
```

---

## **2. Types of Indexing in MongoDB**

### **a) Single-field Index**
Improves query performance on a single field (e.g., `emp_id`):
```javascript
db.Employee.createIndex({ emp_id: 1 });
```

### **b) Compound Index**
Optimizes queries using multiple fields together (e.g., `emp_dept` and `salary`):
```javascript
db.Employee.createIndex({ emp_dept: 1, salary: -1 });
```

### **c) Text Index**
Used for full-text search on fields like `emp_name`:
```javascript
db.Employee.createIndex({ emp_name: "text" });
```

### **d) Multikey Index**
If `emp_skills` is an array field, indexing it improves searches for individual elements:
```javascript
db.Employee.createIndex({ emp_skills: 1 });
```

### **e) Geospatial Index**
For queries involving **location-based data** (if `location` stores coordinates):
```javascript
db.Employee.createIndex({ location: "2dsphere" });
```

---

This covers **Aggregation** and **Indexing** in MongoDB for your **Employee** collection. ðŸš€

Would you like any modifications or additional queries? ðŸ”¥

Q 25  Design and Implement any 5 query using MongoDB
1.	Create a collection called â€˜gamesâ€™.
2.	Add 5 games to the database. Give each document the following properties:
 name, gametype, score (out of 100), achievements
3.	Write a query that returns all the games
4.	Write a query that returns the 3 highest scored games.
5.	Write a query that returns all the games that have both the â€˜Game Maserâ€™ and
the â€˜Speed Demonâ€™ achievements.


32.Create database  :Citydetails(_id,name,area,population(total,Adults,seniorcitizens,sexratio), geography (avgtemp, avgrainfall, longitude, latitude))


1.	Find area wise total population and sort them in increasing order.
2.	Retrieve name and area where average rain fall is greater than 60
3.	Create index on city and area find the max population in Mumbai
4.	Create index on name.
# MongoDB Solution for CityDetails Database

## 1. Create the CityDetails Database and Collection

```javascript
use CityDetails;

db.createCollection("cities", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["_id", "name", "area", "population", "geography"],
      properties: {
        _id: { bsonType: "objectId" },
        name: { bsonType: "string" },
        area: { bsonType: "number" },
        population: {
          bsonType: "object",
          required: ["total", "Adults", "seniorcitizens", "sexratio"],
          properties: {
            total: { bsonType: "number" },
            Adults: { bsonType: "number" },
            seniorcitizens: { bsonType: "number" },
            sexratio: { bsonType: "number" }
          }
        },
        geography: {
          bsonType: "object",
          required: ["avgtemp", "avgrainfall", "longitude", "latitude"],
          properties: {
            avgtemp: { bsonType: "number" },
            avgrainfall: { bsonType: "number" },
            longitude: { bsonType: "number" },
            latitude: { bsonType: "number" }
          }
        }
      }
    }
  }
});
```

## 2. Insert Sample Data

```javascript
db.cities.insertMany([
  {
    name: "Mumbai",
    area: 603.4,
    population: {
      total: 12442373,
      Adults: 8500000,
      seniorcitizens: 1200000,
      sexratio: 922
    },
    geography: {
      avgtemp: 27.5,
      avgrainfall: 242.2,
      longitude: 72.8777,
      latitude: 19.0760
    }
  },
  {
    name: "Delhi",
    area: 1484.0,
    population: {
      total: 11007835,
      Adults: 7500000,
      seniorcitizens: 900000,
      sexratio: 868
    },
    geography: {
      avgtemp: 25.0,
      avgrainfall: 797.3,
      longitude: 77.1025,
      latitude: 28.7041
    }
  },
  {
    name: "Bangalore",
    area: 709.0,
    population: {
      total: 8436675,
      Adults: 6000000,
      seniorcitizens: 800000,
      sexratio: 916
    },
    geography: {
      avgtemp: 23.5,
      avgrainfall: 859.6,
      longitude: 77.5946,
      latitude: 12.9716
    }
  }
]);
```

## 3. Solutions to the Queries

### 1. Find area-wise total population and sort them in increasing order

```javascript
db.cities.aggregate([
  {
    $project: {
      name: 1,
      area: 1,
      totalPopulation: "$population.total"
    }
  },
  {
    $sort: {
      totalPopulation: 1
    }
  }
]);
```

### 2. Retrieve name and area where average rainfall is greater than 60

```javascript
db.cities.find(
  { "geography.avgrainfall": { $gt: 60 } },
  { name: 1, area: 1, "geography.avgrainfall": 1, _id: 0 }
);
```

### 3. Create index on city and area, then find max population in Mumbai

```javascript
// Create compound index on name and area
db.cities.createIndex({ name: 1, area: 1 });

// Find max population in Mumbai
db.cities.aggregate([
  { $match: { name: "Mumbai" } },
  { $group: { _id: null, maxPopulation: { $max: "$population.total" } } }
]);
```

### 4. Create index on name

```javascript
db.cities.createIndex({ name: 1 });
```

## Additional MongoDB Operations

### To view all indexes:

```javascript
db.cities.getIndexes();
```

### To drop an index:

```javascript
db.cities.dropIndex("name_1");
```

### To update a document:

```javascript
db.cities.updateOne(
  { name: "Mumbai" },
  { $set: { "population.total": 12500000 } }
);
```
